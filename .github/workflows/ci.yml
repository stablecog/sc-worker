name: Build and Publish Worker

on:
  push:
    # tags:
    #   - 'release*'
concurrency:
  group: workflow-${{ github.workflow }}
  cancel-in-progress: true
jobs:
  setup_env:
    name: ⚙️ Setup environment
    # runs-on: self-hosted
    runs-on: ubuntu-latest
    steps:
      - name: Add SHORT_SHA env property
        run: echo "SHORT_SHA=`echo ${GITHUB_SHA::7}`" >> $GITHUB_ENV

      - name: Put commit msg in environment
        run: echo "COMMIT_MSG=${{ github.event.head_commit.message }}" >> $GITHUB_ENV

      - name: Escape commit message
        run: |
          echo "COMMIT_MSG=$(echo $COMMIT_MSG | tr -d \'\\\")" >> $GITHUB_ENV

      - name: Get branch name (merge)
        if: github.event_name != 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Get branch name (pull request)
        if: github.event_name == 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_HEAD_REF} | tr / -)" >> $GITHUB_ENV

    outputs:
      short_sha: ${{ env.SHORT_SHA }}
      commit_msg: ${{ env.COMMIT_MSG }}
      branch_name: ${{ env.BRANCH_NAME }}

  build_and_publish_worker:
    name: Build and Publish images
    # runs-on: self-hosted
    runs-on: ubuntu-latest
    needs:
      - setup_env
    env:
      GITHUB_RUN_ID: ${{ github.run_id }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@master

      - name: Login to Docker Hub
        if: success()
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Calculate hash tag for the TORCH image
        id: torch_hash
        run: echo "hash=$(cat requirements-torch.txt Dockerfile.torch | sha256sum | cut -d ' ' -f 1 | head -c 8)" >> "$GITHUB_OUTPUT"

      - name: Check if the TORCH image already exists
        id: torch_check
        run: |
          if docker manifest inspect ${{secrets.DOCKERHUB_SC_TORCH_REPO}}:${{ steps.torch_hash.outputs.hash }} > /dev/null 2>&1; then
            echo "image_exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "image_exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Build & Push the TORCH image to Docker Hub
        uses: docker/build-push-action@v4
        if: ${{ steps.torch_check.outputs.image_exists == 'false' }}
        with:
          context: .
          platforms: linux/amd64
          push: true
          file: ./Dockerfile.torch
          tags: |
            ${{secrets.DOCKERHUB_SC_TORCH_REPO}}:${{ steps.torch_hash.outputs.hash }}-${{ env.GITHUB_RUN_ID }}
            ${{secrets.DOCKERHUB_SC_TORCH_REPO}}:${{ steps.torch_hash.outputs.hash }}
            ${{secrets.DOCKERHUB_SC_TORCH_REPO}}:latest

      - name: Calculate hash tag for BASE image
        id: base_hash
        run: |
          echo -n ${{steps.torch_hash.outputs.hash}} > torch_hash.txt
          echo "hash=$(cat torch_hash.txt requirements.txt Dockerfile.base | sha256sum | cut -d ' ' -f 1 | head -c 8)" >> "$GITHUB_OUTPUT"

      - name: Check if the BASE image already exists
        id: base_check
        run: |
          if docker manifest inspect ${{secrets.DOCKERHUB_SC_WORKER_BASE_REPO}}:${{ steps.base_hash.outputs.hash }} > /dev/null 2>&1; then
            echo "image_exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "image_exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Build & Push the BASE image to Docker Hub
        uses: docker/build-push-action@v4
        if: ${{ steps.base_check.outputs.image_exists == 'false' }}
        with:
          context: .
          platforms: linux/amd64
          push: true
          file: ./Dockerfile.base
          build-args: |
            TORCH_IMAGE=${{secrets.DOCKERHUB_SC_TORCH_REPO}}:${{ steps.torch_hash.outputs.hash }}
          tags: |
            ${{secrets.DOCKERHUB_SC_WORKER_BASE_REPO}}:${{ steps.base_hash.outputs.hash }}-${{ env.GITHUB_RUN_ID }}
            ${{secrets.DOCKERHUB_SC_WORKER_BASE_REPO}}:${{ steps.base_hash.outputs.hash }}
            ${{secrets.DOCKERHUB_SC_WORKER_BASE_REPO}}:latest


      - name: Build & Push the APP image to Docker Hub
        uses: docker/build-push-action@v4
        with:
          push: true
          context: .
          file: ./Dockerfile
          build-args: |
            BASE_IMAGE=${{secrets.DOCKERHUB_SC_WORKER_BASE_REPO}}:${{ steps.base_hash.outputs.hash }}
          tags: |
            ${{secrets.DOCKERHUB_SC_WORKER_REPO}}:${{ needs.setup_env.outputs.branch_name }}-${{ env.GITHUB_RUN_ID }}
            ${{secrets.DOCKERHUB_SC_WORKER_REPO}}:${{ needs.setup_env.outputs.branch_name }}
            ${{secrets.DOCKERHUB_SC_WORKER_REPO}}:latest

      - name: Cleanup Docker Junk
        if: success()
        run: |
          docker rmi -f $(docker images -q ${{secrets.DOCKERHUB_SC_WORKER_REPO}}) || true
          docker system prune -f || true

  deploy:
    name: Deploy Worker
    runs-on: self-hosted
    needs:
      - setup_env
      - build_and_publish_worker
    env:
      GITHUB_RUN_ID: ${{ github.run_id }}
    steps:
      - uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Scale a100surge Group
        run: |
          az aks nodepool scale --resource-group k8s --cluster-name stablecog --name a100surge --node-count 2

      - name: Deploy
        uses: ./.github/actions/k8s-deploy
        with:
          image: ${{secrets.DOCKERHUB_SC_WORKER_REPO}}:${{ needs.setup_env.outputs.branch_name }}-${{ env.GITHUB_RUN_ID }}
          kube_config: ${{ secrets.AKS_KUBE_CONFIG }}

      - name: Scale down a100surge
        if: always()
        run: |
          az aks nodepool scale --resource-group k8s --cluster-name stablecog --name a100surge --node-count 0
          az cache purge
          az account clear